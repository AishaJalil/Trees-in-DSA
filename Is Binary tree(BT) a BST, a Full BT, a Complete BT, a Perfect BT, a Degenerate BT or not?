#include <iostream>
#include <queue>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node* next;

    Node() {
        data = 0;
        left = NULL;
        right = NULL;
        next = NULL;
    }

    Node(int data) {
        this->data = data;
        left = NULL;
        right = NULL;
        next = NULL;
    }
};

class Stack {
public:
    Node* top;

    Stack() {
        top = NULL;
    }

    void push(Node* val) {
        if (top == NULL) {
            top = val;
        } else {
            val->next = top;
            top = val;
        }
    }

    Node* pop() {
        if (top == NULL) {
            return NULL; // Handle empty stack
        }
        Node* temp = top;
        top = top->next;
        temp->next = NULL;
        return temp;
    }

    Node* peek() {
        return top;
    }

    bool isEmpty() {
        return top == NULL;
    }
};
class Queue {
public:
    Node* front;
    Node* rear;

    Queue() : front(NULL), rear(NULL) {}

    void Enqueue(Node* data) {
        if (front == NULL) {
            front = rear = data;
        } else {
            rear->next = data;
            rear = rear->next;
        }
    }

    Node* Dequeue() {
        if (front == NULL) {
            return NULL;
        }

        Node* temp = front;
        front = front->next;
        return temp;
    }

    bool isEmpty() {
        return front == NULL;
    }
};
class BinaryTree {
public:
    Node* root;

    BinaryTree() : root(NULL) {}

    void Insert(int data) {
        if (root == NULL) {
            root = new Node(data);
            return;
        }

        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            Node* temp = q.front();
            q.pop();

            if (temp->left == NULL) {
                temp->left = new Node(data);
                return;
            } else {
                q.push(temp->left);
            }

            if (temp->right == NULL) {
                temp->right = new Node(data);
                return;
            } else {
                q.push(temp->right);
            }
        }
    }
    
    void leftNodesStack(Stack& lst, Node* root) {
        if (root == NULL)
            return;
    
        if (root->left != NULL) {
           leftNodesStack(lst, root->left);
        }
        
        if (root->right != NULL) {
            leftNodesStack(lst, root->right);
        }
        
        
        lst.push(root);
        //cout<<endl<<root->data;
    }
    
     void rightNodesStack(Stack& rst, Node* root) {
        if (root == NULL)
            return;
        
        if (root->left != NULL) {
            rightNodesStack(rst, root->left);
        }
        
        if (root->right != NULL) {
            rightNodesStack(rst, root->right);
        }
        
        rst.push(root);
        //cout<<endl<<root->data;
    }

    bool isBinaryTree(Node* root) {
        if (root != NULL) {
            Stack leftStack, rightStack;
            Node *main_root= root;
            
           // cout<<"\nleft";
            leftNodesStack(leftStack, root->left);
           // cout<<"\nright";
            rightNodesStack(rightStack, root->right);
            bool flag = true;
            Node *leftroot, *rightroot, *leftchild, *rightchild, *leftchild1, *rightchild1;
            while(!leftStack.isEmpty())
            {
            	leftroot= leftStack.pop();
            	if(!leftStack.isEmpty())
            	{
            	    rightchild =leftStack.pop();
				}
				if(!leftStack.isEmpty())
            	{
            		leftchild= leftStack.pop();
				}
            
            	if ((leftchild != NULL && (leftroot->data < leftchild->data || leftchild->data > main_root->data) )||
                    (rightchild != NULL && (leftroot->data > rightchild->data || rightchild->data > main_root->data) )) {
                       flag = false;
                       return flag;
                 }
            	
			}
			return flag;
			
			
			
			while(!rightStack.isEmpty())
            {
            	rightroot= rightStack.pop();
            	if(!rightStack.isEmpty())
            	{
            		rightchild1 =rightStack.pop();
				}
				if(!rightStack.isEmpty())
            	{
            		leftchild1= rightStack.pop();
				}
            
            	if ((leftchild1 != NULL && (rightroot->data > leftchild1->data || leftchild1->data < main_root->data) )||
                    (rightchild1 != NULL && (rightroot->data < rightchild1->data || rightchild1->data < main_root->data) )) {
                       flag = false;
                       return flag;
                 }
            	
			}
			return flag;
			
	   }
	   return true;    //   Empty tree is considered a binary search tree
    }
    
    

    bool isFullBT(Node*& root) {
        if (root == NULL) {
            return true;
        }

        if ((root->left != NULL && root->right != NULL) || (root->left == NULL && root->right == NULL)) {

            bool leftFlag = isFullBT(root->left);
            bool rightFlag = isFullBT(root->right);

      
            if (leftFlag && rightFlag) {
                return true;
           }
        }
         return false;
}

	
    bool isCompleteBT(Node* root) {
    	
        if (root == NULL) {
            return true;
        }
        queue<Node*> q;
        q.push(root);

        bool LeafNode = false; 

        while (!q.empty()) {
            Node* curr = q.front();
            q.pop();

            if (LeafNode && (curr->left || curr->right)) {
                return false;
            }
            if (curr->left) {
                q.push(curr->left);
            } else {
                LeafNode = true;
            }
        
            if (curr->right) {
               q.push(curr->right);
            } else {
                LeafNode = true; 
            }
       }

        return true;
   }
   
    int getDepth(Node *&root1,  int depth)
	{
			if(root1 == NULL)
			{
				return depth;
				
			}
			int dl = getDepth(root1->left,++depth);
			depth = 0;
			int dr = getDepth(root1->right, ++depth);
			
			if(dl<dr)
			return dr;
			return dl;
	}
	// depth of a specific node
	int depthofNode(Node *&root, Node *&node, int depth)
	{
		if(root == NULL)
			{
				return depth;
				
			}
			if(root->data == node->data)
			return depth;
			int dl = depthofNode(root->left,node, ++depth);
			depth = 0;
			int dr = depthofNode(root->right, node, ++depth);
	
	}
	
   bool PerfectBT(Node* &root) {
    if (root == NULL) {
        return true;
    }

    // Check if the tree is full
    bool flagFull = isFullBT(root);
        if (!flagFull) {
            return false;
        }

        // Check if all leaf nodes are at the same level
        Queue q;
        q.Enqueue(root);
        int leafDepth = -1; // Initialize depth of the first leaf node
        bool flagSameLevel = true;

        while (!q.isEmpty()) {
            Node* temp = q.Dequeue();

            if (temp->left == NULL && temp->right == NULL) {
                if (leafDepth == -1) {
                    leafDepth = getDepth(root,0);
                } else if (depthofNode(root, temp, 0) != leafDepth) {
                    flagSameLevel = false;
                    break;
                }
            }

            if (temp->left != NULL) {
                q.Enqueue(temp->left);
            }
            if (temp->right != NULL) {
                q.Enqueue(temp->right);
            }
        }

        return flagSameLevel;
   }

   
   
   // Degenerate binary tree
    bool isDBT(Node* root) {
        if (root == NULL) {
            return true;
        }

         // If the current node has both left and right child
        if (root->left != NULL && root->right != NULL) {
            return false;
        }

        bool leftFlag = isDBT(root->left);
        bool rightFlag = isDBT(root->right);

        return leftFlag && rightFlag;
    }

    void Display(Node* node) {
        if (node == NULL) {
            return;
        }

        cout << node->data << " ";
        Display(node->left);
        Display(node->right);
    }
};

int main() {
    BinaryTree bt;

    bt.Insert(4);
    bt.Insert(2);
    bt.Insert(6);
    bt.Insert(1);
    bt.Insert(3);
   // bt.Insert(5);
    bt.Insert(7);
    
    
//    insertion for checking Degenerate binary tree
//    bt.root= new Node(1);
//    bt.root->left= new Node(2);
//    bt.root->left->left= new Node(3);


    cout << "Tree data: ";
    bt.Display(bt.root);
    cout<<endl;
    
    bool flag1 = bt.isBinaryTree(bt.root);
    if(flag1 == true)
    cout<<"\nbinary tree is binary search tree too... \n";
    else
    cout<<"\nbinary tree is not a binary search tree... \n";
    
    bool flag2 = bt.isFullBT(bt.root);
    if(flag2 == true)
    cout<<"\nbinary tree is full binary tree too... \n";
    else
    cout<<"\nbinary tree is not a full binary tree... \n";
    
    bool flag3 = false;
	flag3 = bt.isCompleteBT(bt.root);
    if(flag3 == true)
    cout<<"\nbinary tree is Complete binary tree too... \n";
    else
    cout<<"\nbinary tree is not a Complete binary tree... \n";
    
    
    bool flag4 =bt.PerfectBT(bt.root);
    if(flag4 == true)
    cout<<"\nbinary tree is Perfect binary tree too... \n";
    else
    cout<<"\nbinary tree is not a Perfect binary tree... \n";
    
    bool flag5 = bt.isDBT(bt.root);
    if(flag5 == true)
    cout<<"\nbinary tree is Degenerate binary tree too... \n";
    else
    cout<<"\nbinary tree is not a Degenerate binary tree... \n";
    
    //cout<<"depth of node 2 is : "<<bt.depthofNode(bt.root,bt.root->left, 0);
    return 0;
}

